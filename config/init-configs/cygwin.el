;; (defun my-translate-cygwin-paths (file)
;;   "Adjust paths generated by cygwin so that they can be opened by tools running under emacs."

;;   ;; If it's not a windows system, or the file doesn't begin with /, don't do any filtering
;;   (if (and (eq system-type 'windows-nt) (string-match "^/" file))
        
;;       ;; Replace paths of the form /cygdrive/c/... or //c/... with c:/...
;;       (if (string-match "^\\(//\\|/cygdrive/\\)\\([a-zA-Z]\\)/" file)
;;           (setq file (file-truename (replace-match "\\2:/" t nil file)))

;;         ;; ELSE
;;         ;; Replace names of the form /... with <cygnus installation>/...
;;         ;; try to find the cygwin installation
;;         (let ((paths (parse-colon-path (getenv "path"))) ; Get $(PATH) from the environment
;;               (found nil))

;;           ;; While there are unprocessed paths and cygwin is not found
;;           (while (and (not found) paths)
;;             (setq path (car paths)) ; grab the first path
;;             (setq paths (cdr paths)) ; walk down the list
          
;;             (if (and (string-match "/bin/?$" path) ; if it ends with /bin
;;                      (file-exists-p     n           ; and cygwin.bat is in the parent
;;                       (concat
;;                        (if (string-match "/$" path) path (concat path "/"))
;;                        "../cygwin.bat")))
;;                 (progn
;;                   (setq found t) ; done looping
;;                   (string-match "^\\(.*\\)/bin/?$" path)
;;                   (setq file (file-truename (concat (match-string 1 path) file))))
;;               )))))
;;   file)


;; This "advice" is a way of hooking a function to supply additional
;; functionality. In this case, we want to pre-filter the argument to the
;; function gud-find-file which is used by the emacs debugging mode to open
;; files specified by debug info.
;; (defadvice gud-find-file (before my-translate-cygwin-paths activate)
;;   (ad-set-arg 0 (my-translate-cygwin-paths (ad-get-arg 0)) t))

